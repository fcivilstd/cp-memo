{
    "init": {
        "prefix": "init",
        "body": [
            "// #define _GLIBCXX_DEBUG",
            "#include<bits/stdc++.h>",
            "",
            "#define rep(i, n) for (int i = 0; i < (int)(n); i++)",
            "#define rng(i, a, b) for (int i = (int)(a); i < (int)(b); i++)",
            "#define rrng(i, a, b) for (int i = (int)(b) - 1; i >= (int)(a); i--)",
            "#define all(x) x.begin(), x.end()",
            "#define rall(x) x.rbegin(), x.rend()",
            "",
            "using namespace std;",
            "",
            "using ll = long long;",
            "using ull = unsigned long long;",
            "using vi = vector<int>;",
            "using vvi = vector<vector<int>>;",
            "using pii = pair<int, int>;",
            "",
            "template<typename T, typename U>",
            "inline bool chmax(T &x, U y) {return x < y ? (x = y, true) : false;}",
            "template<typename T, typename U>",
            "inline bool chmin(T &x, U y) {return x > y ? (x = y, true) : false;}",
            "",
            "// const int MOD = 1000000007;",
            "// const int MOD = 998244353;",
            "",
            "int main()",
            "{",
            "    $1",
            "",
            "    return 0;",
            "}"
        ]
    },
    "zalgorithm": {
        "prefix": "zalgorithm",
        "body": [
            "vector<int> zalgorithm(string& str)",
            "{",
            "    int n = str.size();",
            "    vector<int> ret(n);",
            "",
            "    int s = -1, t = -1;",
            "    for (int i = 1; i < n; i++) {",
            "        if (s != -1) ret[i] = min(ret[i - s], max(0, t - i));",
            "        while (i + ret[i] < n && str[ret[i]] == str[i + ret[i]]) ret[i]++;",
            "        if (t < i + ret[i]) {",
            "            s = i;",
            "            t = i + ret[i];",
            "        }",
            "    }",
            "",
            "    ret[0] = n;",
            "",
            "    return ret;",
            "}"
        ]
    },
    "extgcd": {
        "prefix": "extgcd",
        "body": [
            "// {g, x, y}",
            "// g : GCD(a, b)",
            "// x, y : a * x + b * y = g",
            "tuple<ll, ll, ll> extgcd(ll a, ll b)",
            "{",
            "    if (b == 0) return {a, 1, 0};",
            "    ll g, x, y;",
            "    tie(g, x, y) = extgcd(b, a % b);",
            "    return {g, y, x - a / b * y};",
            "}"
        ]
    },
    "LCA": {
        "prefix": "LCA",
        "body": [
            "struct LCA {",
            "    int _n, _root, _k = 1;",
            "    vector<int> _depth;",
            "    vector<vector<int>> _parent;",
            "",
            "    LCA(const vector<vector<int>>& g, int root = 0) {init(g, root);}",
            "",
            "    void init(const vector<vector<int>>& g, int root = 0)",
            "    {",
            "        _root = root;",
            "        _n = g.size();",
            "",
            "        _depth.resize(_n);",
            "",
            "        while ((1 << _k) < _n) _k++;",
            "        _parent.assign(_k, vector<int>(_n, -1));",
            "",
            "        dfs(g, _root, -1, 0);",
            "",
            "        for (int i = 0; i < _k - 1; i++) {",
            "            for (int j = 0; j < _n; j++) {",
            "                if (_parent[i][j] == -1) _parent[i + 1][j] = -1;",
            "                else _parent[i + 1][j] = _parent[i][_parent[i][j]];",
            "            }",
            "        }",
            "    }",
            "",
            "    void dfs(const vector<vector<int>>& g, int v, int p, int d)",
            "    {",
            "        _parent[0][v] = p;",
            "        _depth[v] = d;",
            "        for (int t : g[v]) {",
            "            if (t == p) continue;",
            "            dfs(g, t, v, d + 1);",
            "        }",
            "    }",
            "",
            "    int find(int u, int v)",
            "    {",
            "        if (_depth[u] < _depth[v]) swap(u, v);",
            "        for (int i = 0; i < _k; i++) {",
            "            if ((_depth[u] - _depth[v]) >> i & 1) {",
            "                u = _parent[i][u];",
            "            }",
            "        }",
            "        if (u == v) return u;",
            "        for (int i = _k - 1; i >= 0; i--) {",
            "            if (_parent[i][u] != _parent[i][v]) {",
            "                u = _parent[i][u];",
            "                v = _parent[i][v];",
            "            }",
            "        }",
            "        return _parent[0][u];",
            "    }",
            "",
            "    int dist(int u, int v)",
            "    {",
            "        return _depth[u] + _depth[v] - 2 * _depth[find(u, v)];",
            "    }",
            "",
            "    int root()",
            "    {",
            "        return _root;",
            "    }",
            "};"
        ]
    },
	"find case": {
        "prefix": "find_case",
        "body": [
            "// #define _GLIBCXX_DEBUG",
            "#include<bits/stdc++.h>",
            "#define rep(i, n) for (int i = 0; i < (int)(n); i++)",
            "typedef long long ll;",
            "",
            "using namespace std;",
            "",
            "// テストケース",
            "// int n;",
            "// vector<int> a;",
            "",
            "auto solve1()",
            "{",
            "    int ans = 0;",
            "    return ans;",
            "}",
            "",
            "auto solve2()",
            "{",
            "    int ans = 1;",
            "    return ans;",
            "}",
            "",
            "int main()",
            "{",
            "    random_device rnd;",
            "    mt19937 mt(rnd());",
            "    // r(MIN, MAX) -> [MIN, MAX]",
            "    uniform_int_distribution<> r(0, 5);",
            "",
            "    rep(_, 1000) {",
            "        // テストケースを作成",
            "        // n = 5;",
            "        // a.resize(n);",
            "        // rep(i, n) a[i] = r(mt);",
            "",
            "        if (solve1() != solve2()) {",
            "            // 落ちるテストケースを表示",
            "            // cout << \"n = \" << n << endl;",
            "            // rep(i, n) cout << a[i] << \" \\n\"[i == n - 1];",
            "",
            "            return 0;",
            "        }",
            "    }",
            "",
            "    cout << -1 << endl;",
            "",
            "    return 0;",
            "}"
        ]
    },
	"coordinate compression": {
        "prefix": "compression",
        "body": [
            "template <class T> void compress(vector<T>& v, int start = 0)",
            "{",
            "    vector<T> _v = v;",
            "    sort(_v.begin(), _v.end());",
            "    _v.erase(unique(_v.begin(), _v.end()), _v.end());",
            "",
            "    rep(i, v.size()) {",
            "        v[i] = lower_bound(_v.begin(), _v.end(), v[i]) - _v.begin();",
            "        v[i] += start;",
            "    }",
            "}"
        ]
    },
	"binary indexed tree": {
        "prefix": "BIT",
        "body": [
            "template <class T> struct BIT {",
            "    // _data[0] ... _data[_n]",
            "    int _n;",
            "    vector<T> _data;",
            "",
            "    BIT() : _n(0) {}",
            "    BIT(int n) : _n(n), _data(n + 1) {}",
            "",
            "    // _data[k] += x",
            "    void add(int k, T x)",
            "    {",
            "        while (k <= _n) {",
            "            _data[k] += T(x);",
            "            k += k & -k;",
            "        }",
            "    }",
            "",
            "    // _data[1] + ... + _data[r]",
            "    T sum(int r)",
            "    {",
            "        T ret = 0;",
            "        while (r > 0) {",
            "            ret += _data[r];",
            "            r -= r & -r;",
            "        }",
            "        return ret;",
            "    }",
            "};"
        ]
    },
    "dijkstra": {
        "prefix": "dijkstra",
        "body": [
            "using P = pair<ll, int>;",
            "",
            "struct edge {",
            "    int to, cost, id;",
            "    edge(int to = 0, int cost = 0, int id = 0): to(to), cost(cost), id(id) {};",
            "};",
            "vector<vector<edge>> g;",
            "vector<ll> dist;",
            "vector<int> path;",
            "",
            "void dijkstra(int s)",
            "{",
            "    // first : d, second : v",
            "    priority_queue<P, vector<P>, greater<P>> q;",
            "    dist[s] = 0;",
            "    q.push({0, s});",
            "",
            "    while (q.size()) {",
            "        auto [d, v] = q.top(); q.pop();",
            "",
            "        if (dist[v] != d) continue;",
            "        for (auto e : g[v]) {",
            "            auto t = e.to;",
            "            auto c = e.cost;",
            "            auto id = e.id;",
            "            if (dist[t] <= dist[v] + c) continue;",
            "            dist[t] = dist[v] + c;",
            "            q.push({dist[t], t});",
            "            path[t] = id;",
            "        }",
            "    }",
            "}"
        ]
    },
	"grid rotation": {
        "prefix": "grid_r90",
        "body": [
            "vector<string> grid_r90(vector<string> &grid)",
            "{",
            "    int _h = grid.size(), _w = grid[0].size();",
            "    vector<string> ret(_w, string(_h, '.'));",
            "    rep(i, _h) rep(j, _w) ret[_w - 1 - j][i] = grid[i][j];",
            "    return ret;",
            "}"
        ]
    },
	"combination1": {
		"prefix": "combination1",
		"body": [
			"// (i + j)Cj = dp[i][j]",
			"ll dp[101][101] = {0};",
			"",
			"dp[0][0] = 1;",
			"",
			"for (int i = 0; i <= 100; i++) {",
			"    for (int j = 0; j <= 100; j++) {",
			"        if (i > 0) dp[i][j] += dp[i - 1][j];",
			"        if (j > 0) dp[i][j] += dp[i][j - 1];",
			"    }",
			"}"
		]
	},
	"combination2": {
		"prefix": "combination2",
		"body": [
			"ll nCk(int n, int k)",
			"{",
			"    if (n - k < k) k = n - k;",
			"    ll a = 1, b = 1;",
			"    rep(i, k) {",
			"        a *= n - i;",
			"        a %= MOD;",
			"        b *= i + 1;",
			"        b %= MOD;",
			"    }",
			"    return (a * mod_pow(b, MOD - 2)) % MOD;",
			"}"
		]
	},
    "combination3": {
        "prefix": "combination3",
        "body": [
            "struct Combination {",
            "    const int MAX_N = 1001001;",
            "    vector<mint> f, invf;",
            "    Combination() {",
            "        f.resize(MAX_N);",
            "        invf.resize(MAX_N);",
            "        f[0] = 1;",
            "        for (int i = 1; i <= MAX_N; i++) f[i] = f[i - 1] * i;",
            "        invf[MAX_N] = f[MAX_N].inv();",
            "        for (int i = MAX_N; i >= 1; i--) invf[i - 1] = invf[i] * i;",
            "    }",
            "    mint choose(int n, int k)",
            "    {",
            "        if (k < 0 || k > n) return 0;",
            "        return f[n] * invf[k] * invf[n - k];",
            "    }",
            "};"
        ]
    },
	"my lower bound": {
		"prefix": "my_lower_bound",
		"body": [
			"int l = -1, r = v.size();",
			"while (r - l > 1) {",
			"    int mid = (l + r) / 2;",
			"    if (v.at(mid) >= k) r = mid;",
			"    else l = mid;",
			"}",
			"// return r;"
		]
	},
	"union find": {
		"prefix" : "union_find",
		"body" : [
            "struct UnionFind {",
            "    // root node: -1 * size",
            "    // otherwise: parent",
            "    vector<int> parent_or_size;",
            "",
            "    UnionFind() {}",
            "    UnionFind(int n)",
            "    {",
            "        parent_or_size.resize(n, -1);",
            "    }",
            "",
            "    void unite(int x, int y)",
            "    {",
            "        int xp = find(x);",
            "        int yp = find(y);",
            "        if (xp == yp) return;",
            "        if (-1 * parent_or_size.at(xp) < -1 * parent_or_size.at(yp)) swap(xp, yp);",
            "        parent_or_size.at(xp) += parent_or_size.at(yp);",
            "        parent_or_size[yp] = xp;",
            "    }",
            "",
            "    // find parent",
            "    int find(int x)",
            "    {",
            "        if (parent_or_size.at(x) < 0) return x;",
            "        return parent_or_size.at(x) = find(parent_or_size.at(x));",
            "    }",
            "",
            "    bool same(int x, int y)",
            "    {",
            "        return find(x) == find(y);",
            "    }",
            "",
            "    int size(int x)",
            "    {",
            "        return -1 * parent_or_size.at(find(x));",
            "    }",
            "};"
		]
	},
	"random" : {
		"prefix" : "my_rand",
		"body" : [
			"    random_device rnd;",
			"    mt19937 mt(rnd());",
			"    // rand100(MIN, MAX) -> [MIN, MAX]",
			"    uniform_int_distribution<> rand100(0, 100);",
			"",
			"    rep(i, 10) {",
			"        cout << rand100(mt) << ' ';",
			"    }",
			"    cout << endl;"
		]
	},
	"prime factorization" : {
		"prefix" : "pf",
		"body" : [
			"vector<pair<ll, int>> pf(ll n)",
			"{",
			"    vector<pair<ll, int>> ret;",
			"",
			"    for (ll i = 2; i * i <= n; i++) {",
			"        if (n % i) continue;",
			"        int x = 0;",
			"        while (n % i == 0) {",
			"            n /= i;",
			"            x++;",
			"        }",
			"        ret.push_back({i, x});",
			"    }",
			"    if (n != 1) ret.push_back({n, 1});",
			"",
			"    return ret;",
			"}"
		]
	},
	"mod pow" : {
		"prefix" : "mod_pow",
		"body" : [
			"ll mod_pow(ll x, ll n)",
			"{",
			"    ll ret = 1;",
			"    while (n > 0) {",
			"        if (n & 1) ret = ret * x % MOD;",
			"        x = x * x % MOD;",
			"        n >>= 1;",
			"    }",
			"    return ret;",
			"}"
		]
	},
    "mint": {
        "prefix": "mint",
        "body": [
            "struct mint {",
            "    ll _x;",
            "    mint() : _x(0) {}",
            "    mint(ll _x) : _x((_x % MOD + MOD) % MOD) {}",
            "    mint& operator++() {_x++; if (_x == MOD) _x = 0; return *this;}",
            "    mint& operator--() {if (_x == 0) _x = MOD; _x--; return *this;}",
            "    mint operator++(int) {mint ret = *this; ++*this; return ret;}",
            "    mint operator--(int) {mint ret = *this; --*this; return ret;}",
            "    mint& operator+=(const mint& a) {if ((_x += a._x) >= MOD) _x -= MOD; return *this;}",
            "    mint& operator-=(const mint& a) {if ((_x += MOD - a._x) >= MOD) _x -= MOD; return *this;}",
            "    mint& operator*=(const mint& a) {_x = _x * a._x % MOD; return *this;}",
            "    mint& operator/=(const mint& a) {_x = _x * a.inv()._x % MOD; return *this;}",
            "    mint operator+(const mint& a) const {return mint(*this) += a;}",
            "    mint operator-(const mint& a) const {return mint(*this) -= a;}",
            "    mint operator*(const mint& a) const {return mint(*this) *= a;}",
            "    mint operator/(const mint& a) const {return mint(*this) /= a;}",
            "    mint pow(ll n) const {",
            "        if (n == 0) return 1;",
            "        mint ret = pow(n / 2);",
            "        ret *= ret;",
            "        return (n & 1) ? ret * _x : ret;",
            "    }",
            "    mint inv() const {return pow(MOD - 2);}",
            "    static mint pow(ll x, ll n) {",
            "        if (n == 0) return 1;",
            "        mint ret = pow(x, n / 2);",
            "        ret *= ret;",
            "        return (n & 1) ? ret * x : ret;",
            "    }",
            "    static mint comb(ll n, int k) {",
            "        if (n - k < k) k = n - k;",
            "        mint a = 1, b = 1;",
            "        rep(i, k) {a *= n - i; b *= i + 1;}",
            "        return a / b;",
            "    }",
            "    bool operator<(const mint& a) const {return _x < a._x;}",
            "    bool operator<=(const mint& a) const {return _x <= a._x;}",
            "    bool operator>(const mint& a) const {return _x > a._x;}",
            "    bool operator>=(const mint& a) const {return _x >= a._x;}",
            "    bool operator==(const mint& a) const {return _x == a._x;}",
            "    bool operator!=(const mint& a) const {return _x != a._x;}",
            "};",
            "istream& operator>>(istream& i, mint& a) {i >> a._x; return i;}",
            "ostream& operator<<(ostream& o, const mint& a) {o << a._x; return o;}"
        ]
    },
    "run length encoding": {
        "prefix": "rle",
        "body": [
            "vector<int> rle(const vector<int>& a)",
            "{",
            "    vector<int> ret;",
            "",
            "    int pre = -1;",
            "    for (auto e : a) {",
            "        if (e == pre) {",
            "            ret.back()++;",
            "        } else {",
            "            ret.push_back(1);",
            "            pre = e;",
            "        }",
            "    }",
            "    return ret;",
            "}"
        ]
    },
    "prime number": {
        "prefix": "pn",
        "body": [
            "vector<int> pn()",
            "{",
            "    const int M = 1001001;",
            "",
            "    vector<int> hurui(M);",
            "    for (int i = 2; i < M; i++) {",
            "        if (hurui[i]) continue;",
            "        for (int j = i * 2; j < M; j += i) {",
            "            hurui[j]++;",
            "        }",
            "    }",
            "",
            "    vector<int> ret;",
            "    rng(i, 2, M) {",
            "        if (!hurui[i]) ret.push_back(i);",
            "    }",
            "",
            "    return ret;",
            "}"
        ]
    },
    "unique vector": {
        "prefix": "uniq",
        "body": [
            "template<typename T>",
            "void uniq(vector<T>& v)",
            "{",
            "    sort(v.begin(), v.end());",
            "    v.erase(unique(v.begin(), v.end()), v.end());",
            "}"
        ]
    }
}